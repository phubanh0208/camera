"""
Desktop App Ch·∫•m C√¥ng v·ªõi Nh·∫≠n Di·ªán Khu√¥n M·∫∑t
Main Application - GUI s·ª≠ d·ª•ng Tkinter + OpenCV
"""
import tkinter as tk
from tkinter import ttk, messagebox, simpledialog, filedialog
import cv2
from PIL import Image, ImageTk
from datetime import datetime
import threading
import os

from database import EmployeeDatabase, AttendanceLog
from face_recognition_module import FaceRecognizer
from greeting_system import GreetingSystem

class AttendanceApp:
    def __init__(self, root):
        self.root = root
        self.root.title("H·ªá Th·ªëng Ch·∫•m C√¥ng Nh·∫≠n Di·ªán Khu√¥n M·∫∑t")
        self.root.geometry("1200x700")
        
        # Initialize components
        self.db = EmployeeDatabase()
        self.attendance_log = AttendanceLog()
        self.face_recognizer = FaceRecognizer(tolerance=0.5)
        self.greeting_system = GreetingSystem()
        
        # Load known faces
        self.face_recognizer.load_known_faces(self.db.get_all_employees())
        
        # Camera
        self.camera = None
        self.camera_running = False
        self.current_frame = None
        
        # Tracking attendance
        self.last_recognized = {}  # {employee_id: timestamp}
        self.recognition_cooldown = 30  # seconds (tr√°nh ghi log li√™n t·ª•c)
        
        # Setup GUI
        self.setup_ui()
        
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán"""
        # Main container
        main_container = ttk.Frame(self.root, padding="10")
        main_container.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_container.columnconfigure(0, weight=1)
        main_container.rowconfigure(0, weight=1)
        
        # Left panel - Camera feed
        left_panel = ttk.LabelFrame(main_container, text="Camera Tr·ª±c Ti·∫øp", padding="10")
        left_panel.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=5)
        
        self.camera_label = ttk.Label(left_panel)
        self.camera_label.pack()
        
        # Camera controls
        camera_controls = ttk.Frame(left_panel)
        camera_controls.pack(pady=10)
        
        self.start_camera_btn = ttk.Button(
            camera_controls, 
            text="üé• B·∫≠t Camera", 
            command=self.start_camera
        )
        self.start_camera_btn.pack(side=tk.LEFT, padx=5)
        
        self.stop_camera_btn = ttk.Button(
            camera_controls, 
            text="‚èπ T·∫Øt Camera", 
            command=self.stop_camera,
            state=tk.DISABLED
        )
        self.stop_camera_btn.pack(side=tk.LEFT, padx=5)
        
        # Right panel - Info and controls
        right_panel = ttk.Frame(main_container, padding="10")
        right_panel.grid(row=0, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=5)
        
        # Employee info section
        info_frame = ttk.LabelFrame(right_panel, text="Th√¥ng Tin Nh√¢n Vi√™n", padding="10")
        info_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        self.info_text = tk.Text(info_frame, height=10, width=40, state=tk.DISABLED)
        self.info_text.pack(fill=tk.BOTH, expand=True)
        
        # Today's attendance
        attendance_frame = ttk.LabelFrame(right_panel, text="Ch·∫•m C√¥ng H√¥m Nay", padding="10")
        attendance_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # Scrollbar for attendance list
        scroll = ttk.Scrollbar(attendance_frame)
        scroll.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.attendance_listbox = tk.Listbox(
            attendance_frame, 
            yscrollcommand=scroll.set,
            height=10
        )
        self.attendance_listbox.pack(fill=tk.BOTH, expand=True)
        scroll.config(command=self.attendance_listbox.yview)
        
        # Buttons
        button_frame = ttk.Frame(right_panel)
        button_frame.pack(fill=tk.X, pady=10)
        
        ttk.Button(
            button_frame, 
            text="‚ûï Th√™m Nh√¢n Vi√™n", 
            command=self.add_employee_dialog
        ).pack(fill=tk.X, pady=2)
        
        ttk.Button(
            button_frame, 
            text="üìã Xem Danh S√°ch NV", 
            command=self.view_employees
        ).pack(fill=tk.X, pady=2)
        
        ttk.Button(
            button_frame, 
            text="üìä Xu·∫•t File CSV", 
            command=self.export_attendance
        ).pack(fill=tk.X, pady=2)
        
        ttk.Button(
            button_frame, 
            text="üîÑ L√†m M·ªõi", 
            command=self.refresh_today_attendance
        ).pack(fill=tk.X, pady=2)
        
        # Status bar
        self.status_var = tk.StringVar(value="S·∫µn s√†ng")
        status_bar = ttk.Label(
            main_container, 
            textvariable=self.status_var, 
            relief=tk.SUNKEN
        )
        status_bar.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=5)
        
        # Load today's attendance
        self.refresh_today_attendance()
    
    def start_camera(self):
        """B·∫≠t camera"""
        if not self.camera_running:
            self.camera = cv2.VideoCapture(0)
            if self.camera.isOpened():
                self.camera_running = True
                self.start_camera_btn.config(state=tk.DISABLED)
                self.stop_camera_btn.config(state=tk.NORMAL)
                self.status_var.set("Camera ƒëang ch·∫°y...")
                self.update_camera_feed()
            else:
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ m·ªü camera!")
    
    def stop_camera(self):
        """T·∫Øt camera"""
        self.camera_running = False
        if self.camera:
            self.camera.release()
        self.start_camera_btn.config(state=tk.NORMAL)
        self.stop_camera_btn.config(state=tk.DISABLED)
        self.status_var.set("Camera ƒë√£ t·∫Øt")
        self.camera_label.config(image='')
    
    def update_camera_feed(self):
        """C·∫≠p nh·∫≠t video feed t·ª´ camera"""
        if self.camera_running and self.camera:
            ret, frame = self.camera.read()
            if ret:
                self.current_frame = frame.copy()
                
                # Nh·∫≠n di·ªán khu√¥n m·∫∑t
                face_results = self.face_recognizer.detect_and_recognize(frame)
                
                # X·ª≠ l√Ω t·ª´ng khu√¥n m·∫∑t
                for face_info in face_results:
                    employee_id = face_info['employee_id']
                    
                    if employee_id:
                        employee = self.db.get_employee(employee_id)
                        name = employee['name']
                        
                        # V·∫Ω bounding box
                        frame = self.face_recognizer.draw_face_box(frame, face_info, name)
                        
                        # Ki·ªÉm tra v√† ghi log ch·∫•m c√¥ng
                        self.process_attendance(employee_id, name)
                    else:
                        # Khu√¥n m·∫∑t l·∫°
                        frame = self.face_recognizer.draw_face_box(frame, face_info, "Unknown")
                
                # Chuy·ªÉn ƒë·ªïi frame ƒë·ªÉ hi·ªÉn th·ªã trong Tkinter
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                frame_resized = cv2.resize(frame_rgb, (640, 480))
                img = Image.fromarray(frame_resized)
                imgtk = ImageTk.PhotoImage(image=img)
                
                self.camera_label.imgtk = imgtk
                self.camera_label.config(image=imgtk)
            
            # L·∫∑p l·∫°i sau 10ms
            self.root.after(10, self.update_camera_feed)
    
    def process_attendance(self, employee_id, name):
        """X·ª≠ l√Ω ch·∫•m c√¥ng cho nh√¢n vi√™n"""
        now = datetime.now()
        
        # Ki·ªÉm tra cooldown
        if employee_id in self.last_recognized:
            time_diff = (now - self.last_recognized[employee_id]).total_seconds()
            if time_diff < self.recognition_cooldown:
                return
        
        # Ghi log ch·∫•m c√¥ng
        timestamp = self.attendance_log.log_attendance(employee_id, name)
        self.last_recognized[employee_id] = now
        
        # Ch√†o nh√¢n vi√™n
        self.greeting_system.greet_employee(name, employee_id)
        
        # C·∫≠p nh·∫≠t UI
        self.update_employee_info(employee_id, name, timestamp)
        self.refresh_today_attendance()
        
        self.status_var.set(f"‚úÖ {name} ƒë√£ ch·∫•m c√¥ng l√∫c {timestamp}")
    
    def update_employee_info(self, employee_id, name, timestamp):
        """C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n l√™n UI"""
        self.info_text.config(state=tk.NORMAL)
        self.info_text.delete(1.0, tk.END)
        
        info = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   CH·∫§M C√îNG TH√ÄNH C√îNG!      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üë§ T√™n: {name}
üÜî ID: {employee_id}
‚è∞ Th·ªùi gian: {timestamp}

‚úÖ Ch√∫c b·∫°n m·ªôt ng√†y l√†m vi·ªác vui v·∫ª!
        """
        
        self.info_text.insert(1.0, info)
        self.info_text.config(state=tk.DISABLED)
    
    def refresh_today_attendance(self):
        """L√†m m·ªõi danh s√°ch ch·∫•m c√¥ng h√¥m nay"""
        self.attendance_listbox.delete(0, tk.END)
        
        today_records = self.attendance_log.get_today_attendance()
        for record in today_records:
            display_text = f"{record['Th·ªùi gian']} - {record['T√™n']} ({record['Lo·∫°i']})"
            self.attendance_listbox.insert(tk.END, display_text)
    
    def add_employee_dialog(self):
        """Dialog th√™m nh√¢n vi√™n m·ªõi"""
        if not self.camera_running:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng b·∫≠t camera tr∆∞·ªõc!")
            return
        
        # Nh·∫≠p th√¥ng tin
        employee_id = simpledialog.askstring("Th√™m Nh√¢n Vi√™n", "Nh·∫≠p ID nh√¢n vi√™n:")
        if not employee_id:
            return
        
        # Ki·ªÉm tra ID ƒë√£ t·ªìn t·∫°i
        if self.db.get_employee(employee_id):
            messagebox.showerror("L·ªói", "ID nh√¢n vi√™n ƒë√£ t·ªìn t·∫°i!")
            return
        
        name = simpledialog.askstring("Th√™m Nh√¢n Vi√™n", "Nh·∫≠p t√™n nh√¢n vi√™n:")
        if not name:
            return
        
        # Ch·ª•p ·∫£nh v√† t·∫°o encoding
        if self.current_frame is not None:
            face_encoding = self.face_recognizer.create_face_encoding(self.current_frame)
            
            if face_encoding is not None:
                # L∆∞u v√†o database
                self.db.add_employee(employee_id, name, face_encoding)
                
                # Reload known faces
                self.face_recognizer.load_known_faces(self.db.get_all_employees())
                
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ th√™m nh√¢n vi√™n {name}!")
                self.status_var.set(f"ƒê√£ th√™m nh√¢n vi√™n: {name}")
            else:
                messagebox.showerror("L·ªói", "Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t! Vui l√≤ng th·ª≠ l·∫°i.")
    
    def view_employees(self):
        """Xem danh s√°ch nh√¢n vi√™n"""
        employees = self.db.get_all_employees()
        
        # T·∫°o c·ª≠a s·ªï m·ªõi
        view_window = tk.Toplevel(self.root)
        view_window.title("Danh S√°ch Nh√¢n Vi√™n")
        view_window.geometry("500x400")
        
        # Treeview
        tree_frame = ttk.Frame(view_window, padding="10")
        tree_frame.pack(fill=tk.BOTH, expand=True)
        
        tree = ttk.Treeview(tree_frame, columns=('ID', 'T√™n', 'Ng√†y t·∫°o'), show='headings')
        tree.heading('ID', text='ID')
        tree.heading('T√™n', text='T√™n')
        tree.heading('Ng√†y t·∫°o', text='Ng√†y t·∫°o')
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL, command=tree.yview)
        tree.configure(yscroll=scrollbar.set)
        
        tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Th√™m d·ªØ li·ªáu
        for emp_id, emp_data in employees.items():
            tree.insert('', tk.END, values=(emp_id, emp_data['name'], emp_data['created_at']))
        
        # Button x√≥a
        def delete_selected():
            selected = tree.selection()
            if selected:
                item = tree.item(selected[0])
                emp_id = item['values'][0]
                
                if messagebox.askyesno("X√°c nh·∫≠n", f"X√≥a nh√¢n vi√™n {item['values'][1]}?"):
                    self.db.delete_employee(emp_id)
                    self.face_recognizer.load_known_faces(self.db.get_all_employees())
                    tree.delete(selected[0])
                    messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a nh√¢n vi√™n!")
        
        ttk.Button(view_window, text="üóë X√≥a nh√¢n vi√™n ƒë√£ ch·ªçn", command=delete_selected).pack(pady=10)
    
    def export_attendance(self):
        """Xu·∫•t file CSV ch·∫•m c√¥ng"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".csv",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")],
            initialfile=f"attendance_{datetime.now().strftime('%Y%m%d')}.csv"
        )
        
        if filename:
            output_file = self.attendance_log.export_to_csv(filename)
            if output_file:
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t file: {output_file}")
                self.status_var.set(f"ƒê√£ xu·∫•t CSV: {output_file}")
    
    def on_closing(self):
        """X·ª≠ l√Ω khi ƒë√≥ng ·ª©ng d·ª•ng"""
        if self.camera_running:
            self.stop_camera()
        self.root.destroy()


def main():
    root = tk.Tk()
    app = AttendanceApp(root)
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    root.mainloop()


if __name__ == "__main__":
    main()
